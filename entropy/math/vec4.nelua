require "math"

## local function impl(T)
function #|T|#.__eq(a: #|T|#, b: #|T|#): boolean
  return (a.x == b.x) and (a.y == b.y) and (a.z == b.z) and (a.w == b.w)
end

function #|T|#.__add(a: #|T|#, b: #|T|#): #|T|#
  return {
    x = a.x + b.x,
    y = a.y + b.y,
    z = a.z + b.z,
    w = a.w + b.w,
  }
end

function #|T|#.__sub(a: #|T|#, b: #|T|#): #|T|#
  return {
    x = a.x - b.x,
    y = a.y - b.y,
    z = a.z - b.z,
    w = a.w - b.w,
  }
end

function #|T|#.__unm(a: #|T|#): #|T|#
  return {
    x = -a.x,
    y = -a.y,
    z = -a.z,
    w = -a.w,
  }
end

function #|T|#:__len(): number
  return math.sqrt((self.x * self.x) + (self.y * self.y) + (self.z * self.z) + (self.w * self.w))
end

function #|T|#:__tostring(): string
  return #[T]# .. "(" .. self.x .. ", " .. self.y .. ", " .. self.z .. ", " .. self.w .. ")"
end
## end

local Vec4: type = @record{
  x: float32,
  y: float32,
  z: float32,
  w: float32,
}
## impl("Vec4")

local DVec4: type = @record{
  x: float64,
  y: float64,
  z: float64,
  w: float64,
}
## impl("DVec4")
local Vec4.D = DVec4

return Vec4
