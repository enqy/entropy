require "math"

## local function impl(T, B)
function #|T|#.__eq(a: #|T|#, b: #|T|#): boolean
  return (a.x == b.x) and (a.y == b.y) and (a.z == b.z)
end

function #|T|#.__add(a: #|T|#, b: #|T|#): #|T|#
  return {
    x = a.x + b.x,
    y = a.y + b.y,
    z = a.z + b.z,
  }
end

function #|T|#.__sub(a: #|T|#, b: #|T|#): #|T|#
  return {
    x = a.x - b.x,
    y = a.y - b.y,
    z = a.z - b.z,
  }
end

function #|T|#.__unm(a: #|T|#): #|T|#
  return {
    x = -a.x,
    y = -a.y,
    z = -a.z,
  }
end

function #|T|#:__mul(s: #|B|#): #|T|#
  return {
    x = self.x * s,
    y = self.y * s,
    z = self.z * s,
  }
end

function #|T|#:dot(b: #|T|#): #|B|#
  return self.x * b.x + self.y * b.y + self.z * b.z
end

function #|T|#:cross(b: #|T|#): #|T|#
  return {
    x = self.y * b.z - self.z * b.y,
    y = self.z * b.x - self.x * b.z,
    z = self.x * b.y - self.y * b.x,
  }
end

function #|T|#:__len(): #|B|#
  return math.sqrt((self.x * self.x) + (self.y * self.y) + (self.z * self.z))
end

-- this is actually length squared
function #|T|#:__bnot(): #|B|#
  return (self.x * self.x) + (self.y * self.y) + (self.z * self.z)
end

function #|T|#:norm(): #|T|#
  local len = #self
  return {
    x = self.x / len,
    y = self.y / len,
    z = self.z / len,
  }
end

function #|T|#:__tostring(): string
  return #[T]# .. "(" .. self.x .. ", " .. self.y .. ", " .. self.z .. ")"
end
## end

local Vec3: type = @record{
  x: float32,
  y: float32,
  z: float32,
}
## impl("Vec3", "float32")

local DVec3: type = @record{
  x: float64,
  y: float64,
  z: float64,
}
## impl("DVec3", "float64")
local Vec3.D = DVec3

return Vec3
