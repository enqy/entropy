require "filestream"

require "wgpu"

local Shader: type = @record{
  descriptor: WGPUShaderModuleDescriptor,
  module: WGPUShaderModule,
}

function Shader.load_from_file(path: string): Shader
  local file = filestream.open(path, "rb")
  file:seek("set", 0)

  local wgsl_descriptor: *WGPUShaderModuleWGSLDescriptor = default_allocator:new(@WGPUShaderModuleWGSLDescriptor)
  $wgsl_descriptor = (@WGPUShaderModuleWGSLDescriptor){
    chain = (@WGPUChainedStruct) {
      sType = WGPUSType_ShaderModuleWGSLDescriptor,
    },
    code = file:read("*a"),
  }

  file:close()

  return {
    descriptor = (@WGPUShaderModuleDescriptor){
      nextInChain = (@*WGPUChainedStruct)(wgsl_descriptor),
    },
  }
end

function Shader.load_from_file_comptime(path: string <comptime>): Shader
  ##[[
  local file = io.open(path.value, "rb")
  file:seek("set", 0)
  local code = file:read("*a")
  ]]

  local wgsl_descriptor: *WGPUShaderModuleWGSLDescriptor = default_allocator:new(@WGPUShaderModuleWGSLDescriptor)
  $wgsl_descriptor = (@WGPUShaderModuleWGSLDescriptor){
    chain = (@WGPUChainedStruct) {
      sType = WGPUSType_ShaderModuleWGSLDescriptor,
    },
    code = #[code]#,
  }

  return {
    descriptor = (@WGPUShaderModuleDescriptor){
      nextInChain = (@*WGPUChainedStruct)(wgsl_descriptor),
    },
  }
end

function Shader:create(device: WGPUDevice): void
  self.module = wgpuDeviceCreateShaderModule(device, self.descriptor)
end

function Shader:cleanup(): void
  wgpuShaderModuleDrop(self.module)
end

return Shader
