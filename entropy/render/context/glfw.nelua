require "glfw"
require "glfwnative"
require "wgpu"

local Render = require "entropy.render"
local Event = require "entropy.defs.event"

require "list"

local GLFWContext: type = @record{
  vsync: boolean,
  surface_config: WGPUSurfaceConfiguration,

  user_pointer: pointer,
  resize_callback: function(pointer, uint32, uint32): void,

  window: *GLFWwindow,
  surface: WGPUSurface,

  adapter: WGPUAdapter,
  device: WGPUDevice,

  event_queue: list(Event),
}

function GLFWContext:configure_surface(): void
  if self.vsync then
    self.surface_config.presentMode = WGPUPresentMode_Fifo
  else
    self.surface_config.presentMode = WGPUPresentMode_Mailbox
  end

  wgpuSurfaceConfigure(self.surface, self.surface_config)
end

function GLFWContext:resize(width: uint32, height: uint32): void
  self.surface_config.width = width
  self.surface_config.height = height
  self:configure_surface()
end

function GLFWContext:init(title: string, width: uint32, height: uint32, vsync: boolean, render: *Render): void
  -- init glfw
  glfwInit()

  -- don't create an opengl context
  glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API)
  -- create glfw window
  self.window = glfwCreateWindow(width, height, title, nilptr, nilptr)
  assert(self.window, "failed to create window!")
  self.surface_config = (@WGPUSurfaceConfiguration){
    width = width,
    height = height,
  }

  -- set user pointer to ourselves
  glfwSetWindowUserPointer(self.window, self)

  -- add resize callback
  glfwSetWindowSizeCallback(self.window, function(window: *GLFWwindow, width: cint, height: cint): void
    local cself = (@*GLFWContext)(glfwGetWindowUserPointer(window))
    cself:resize(width, height)
    if cself.resize_callback then
      cself.resize_callback(cself.user_pointer, width, height)
    end
  end)

  -- add event callbacks
  glfwSetKeyCallback(self.window, function(window: *GLFWwindow, key: cint, scancode: cint, action: cint, mods: cint): void
    local cself = (@*GLFWContext)(glfwGetWindowUserPointer(window))
    local event: Event
    event.type = Event.Type.Key
    event.data.Key.action = action
    event.data.Key.key = key
    event.data.Key.modifiers = mods
    cself.event_queue:pushback(event)
  end)

  glfwSetCursorPosCallback(self.window, function(window: *GLFWwindow, x: cdouble, y: cdouble): void
    local cself = (@*GLFWContext)(glfwGetWindowUserPointer(window))
    local event: Event
    event.type = Event.Type.MouseMotion
    event.data.MouseMotion.x = x
    event.data.MouseMotion.y = y
    cself.event_queue:pushback(event)
  end)

  -- cursor settings
  glfwSetInputMode(self.window, GLFW_CURSOR, GLFW_CURSOR_DISABLED)
  if glfwRawMouseMotionSupported() ~= 0 then
    glfwSetInputMode(self.window, GLFW_RAW_MOUSE_MOTION, GLFW_TRUE)
  end

  -- create webgpu surface for window
  -- this part is platform dependent
## if ccinfo.is_windows then
  require "windows"
  self.surface = wgpuInstanceCreateSurface(
    render.instance,
    &(@WGPUSurfaceDescriptor){
      nextInChain = (@*WGPUChainedStruct)(&(@WGPUSurfaceDescriptorFromWindowsHWND){
        chain = (@WGPUChainedStruct){
          sType = WGPUSType_SurfaceDescriptorFromWindowsHWND,
        },
        hinstance = GetModuleHandleW(nilptr),
        hwnd = glfwGetWin32Window(self.window),
      }),
    }
  )
## elseif ccinfo.is_linux then
  self.surface = wgpuInstanceCreateSurface(
    render.instance,
    &(@WGPUSurfaceDescriptor){
      nextInChain = (@*WGPUChainedStruct)(&(@WGPUSurfaceDescriptorFromWaylandSurface){
        chain = (@WGPUChainedStruct){
          sType = WGPUSType_SurfaceDescriptorFromWaylandSurface,
        },
        display = glfwGetWaylandDisplay(),
        surface = glfwGetWaylandWindow(self.window),
      }),
    }
  )
## elseif ccinfo.is_apple then
  local metal_layer = nilptr
  ##[==[ cemit [[
    NSWindow *ns_window = glfwGetCocoaWindow(self->window);
    [ns_window.contentView setWantsLayer:YES];
    metal_layer = [CAMetalLayer layer];
    [ns_window.contentView setLayer:metal_layer];
  ]] ]==]
  self.surface = wgpuInstanceCreateSurface(
    render.instance,
    &(@WGPUSurfaceDescriptor){
      nextInChain = (@*WGPUChainedStruct)(&(@WGPUSurfaceDescriptorFromMetalLayer){
        chain = (@WGPUChainedStruct){
          sType = WGPUSType_SurfaceDescriptorFromMetalLayer,
        },
        layer = metal_layer,
      }),
    }
  )
## end

  -- request adapter and device
  self.adapter, self.device = render:request_adapter_device(self.surface)

  -- get supported surface capabilities
  local supported_surface_capabilities: WGPUSurfaceCapabilities
  wgpuSurfaceGetCapabilities(self.surface, self.adapter, &supported_surface_capabilities)
  defer wgpuSurfaceCapabilitiesFreeMembers(supported_surface_capabilities) end
  self.surface_config.device = self.device
  self.surface_config.usage = WGPUTextureUsage_RenderAttachment
  self.surface_config.format = (@*[0]WGPUTextureFormat)(supported_surface_capabilities.formats)[0]
  self.surface_config.alphaMode = (@*[0]WGPUCompositeAlphaMode)(supported_surface_capabilities.alphaModes)[0]

  -- initial surface configuration
  self.vsync = vsync
  self:configure_surface()
end

function GLFWContext:cleanup(): void
  glfwTerminate()
end

function GLFWContext:view(): WGPUTextureView <inline>
  local surface_texture: WGPUSurfaceTexture
  wgpuSurfaceGetCurrentTexture(self.surface, &surface_texture)
  if surface_texture == nilptr then
    return nilptr
  end
  return wgpuTextureCreateView(surface_texture.texture, nilptr)
end

function GLFWContext:present(): void <inline>
  wgpuSurfacePresent(self.surface)
end

function GLFWContext:should_close(): boolean <inline>
  return glfwWindowShouldClose(self.window) ~= 0
end

function GLFWContext:close(): void <inline>
  glfwSetWindowShouldClose(self.window, 1)
end

function GLFWContext:poll_event(): (boolean, *list(Event)) <inline>
  glfwPollEvents()

  if self.event_queue:empty() then
    return false, &self.event_queue
  else
    return true, &self.event_queue
  end
end

return GLFWContext
