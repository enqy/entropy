require "wgpu"

local World = require "entropy.world"
local Storage = require "entropy.world.storage"
local Vec2 = require "entropy.math.vec2"
local Vec3 = require "entropy.math.vec3"
local Vec4 = require "entropy.math.vec4"
local Mat4 = require "entropy.math.mat4"

require "io"
require "vector"

local Vertex: type = @record{
  pos: Vec3,
  col: Vec4,
  uv: Vec2,
}

local Instance: type = @record{
  transform: Mat4,
}

local Mesh: type = @record{
  instances: *Storage(Instance),

  transform: Mat4,

  vertices: vector(Vertex),
  indices: vector(uint32),

  vertex_buffer: WGPUBuffer,
  index_buffer: WGPUBuffer,
}
local Mesh.Vertex = Vertex
local Mesh.Instance = Instance

function Mesh.load_from_obj(path: string): Mesh
  local result: Mesh

  local vertices: vector(Vertex)
  local indices: vector(uint32)

  -- read all vertices
  for line in io.lines(path) do
    local matched, captures = line:match("v (%S+) (%S+) (%S+)")
    if matched then
      vertices:push({
        pos = {tonumber(captures[1]), tonumber(captures[2]), tonumber(captures[3])},
        col = {1, 1, 1, 1},
        uv = {0, 0},
      })
    end
  end

  -- read all indices
  for line in io.lines(path) do
    local matched, captures = line:match("f (%S+) (%S+) (%S+)")
    if matched then
      indices:push(tointeger(captures[1]) - 1)
      indices:push(tointeger(captures[2]) - 1)
      indices:push(tointeger(captures[3]) - 1)
    end
  end

  result.vertices = vertices
  result.indices = indices

  return result
end

function Mesh:init(world: *World, id: string <comptime>)
  ## local a = "entropy.scene.meshes." .. id.value
  World.r(#[a]#, Instance)

  self.instances = (@*Storage(Instance))(world:s(#[a]#, Instance))
end

function Mesh:instance(): Mesh.Instance
  return {
    transform = self.transform
  }
end

function Mesh:cleanup()
  wgpuBufferDrop(self.vertex_buffer)
  wgpuBufferDrop(self.index_buffer)
end

function Mesh:prepare(renderer: a_renderer)
  -- prepare vertex buffer
  self.vertex_buffer = wgpuDeviceCreateBuffer(
    renderer.device,
    &(@WGPUBufferDescriptor){
      label = "mesh vertex buffer",
      usage = WGPUBufferUsage_Vertex,
      size = #Mesh.Vertex * #self.vertices,
      mappedAtCreation = true,
    }
  )
  local vertex_buffer_mapped = (@*[0]Mesh.Vertex)(wgpuBufferGetMappedRange(self.vertex_buffer, 0, #Mesh.Vertex * #self.vertices))
  for i = 0, #self.vertices - 1 do
    vertex_buffer_mapped[i] = self.vertices[i]
  end
  wgpuBufferUnmap(self.vertex_buffer)

  -- prepare index buffer
  self.index_buffer = wgpuDeviceCreateBuffer(
    renderer.device,
    &(@WGPUBufferDescriptor){
      label = "mesh index buffer",
      usage = WGPUBufferUsage_Index,
      size = #uint32 * #self.indices,
      mappedAtCreation = true,
    }
  )
  local index_buffer_mapped = (@*[0]uint32)(wgpuBufferGetMappedRange(self.index_buffer, 0, #uint32 * #self.indices))
  for i = 0, #self.indices - 1 do
    index_buffer_mapped[i] = self.indices[i]
  end
  wgpuBufferUnmap(self.index_buffer)
end

-- register storage for Mesh
World.r("entropy.scene.meshes", Mesh)

return Mesh
