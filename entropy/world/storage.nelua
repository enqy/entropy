require "vector"

-- there is a workaround here to get the compiler to generate valid c code by manually creating methods with . instead of :
## function make_StorageT(name, T)
  ## static_assert(traits.is_type(T), "invalid type '%s'", T)
  local T: type = @#[T]#

  local Pointer = require "entropy.world.pointer"
  local StorageT: type <nickname(#[string.format("Storage(%s)", T)]#)> = @record{
    data: vector(T),
    refs: vector(uint16),
    free: vector(usize),
  }

  ## StorageT.value.world_name = name

  function StorageT.reserve(self: *StorageT, n: usize): void
    if self.data:capacity() < n then
      self.data:reserve(n)
      self.refs:reserve(n)
    end
  end

  function StorageT.create(self: *StorageT, item: T): Pointer(name, T) <inline>
    if #self.free > 0 then
      local id = self.free:pop()

      -- sanity check
      check(self.refs[id] == 0, "supposedly free id still has references!")

      self.data[id] = item
      self.refs[id] = 1

      return id
    else
      self.data:push(item)
      local id = #self.data - 1
      self.refs:push(1)

      -- sanity check
      check(id == #self.refs - 1, "ids between refcount and data don't match up!")

      return id
    end
  end

  function StorageT.pin(self: *StorageT, ptr: Pointer(name, T)): Pointer(name, T) <inline>
    check(ptr < #self.data, "invalid ptr!")
    check(self.refs[ptr] > 0, "dead ptr!")

    self.refs[ptr] = self.refs[ptr] + 1
    return ptr
  end

  function StorageT.unpin(self: *StorageT, ptr: Pointer(name, T)): void <inline>
    check(ptr < #self.data, "invalid ptr!")
    check(self.refs[ptr] > 0, "dead ptr!")

    self.refs[ptr] = self.refs[ptr] - 1
    if self.refs[ptr] == 0 then
      self.free:push(ptr)
    end
  end

  function StorageT.__atindex(self: *StorageT, ptr: Pointer(name, T)): *T <inline>
    check(ptr < #self.data, "invalid ptr!")
    check(self.refs[ptr] > 0, "dead ptr!")

    return &self.data[ptr]
  end

  function StorageT.__mnext(self: *StorageT, ctrl_var: isize): (boolean, isize, *T) <inline>
    ctrl_var = ctrl_var + 1

    while ctrl_var < #self.data do
      if self.refs[ctrl_var] > 0 then
        return true, ctrl_var, &self.data[ctrl_var]
      else
        ctrl_var = ctrl_var + 1
      end
    end

    return false, -1, nilptr
  end

  function StorageT.__mpairs(self: *StorageT): (auto, *StorageT, isize) <inline>
    return StorageT.__mnext, self, -1
  end

  ## function StorageT.is_defined()
    ## return true
  ## end

  ## return StorageT
## end

return #[generalize(make_StorageT)]#
