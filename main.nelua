require "iterators"
require "string"
require "os"

local World = require "entropy.world"
local Storage = require "entropy.world.storage"
local P = require "entropy.world.pointer"
local Vec2 = require "entropy.math.vec2"
local Mat4 = require "entropy.math.mat4"

local world: World
-- register components
World.r("positions", Vec2)
World.r("velocities", Vec2)
##[[
function unroll(count, block)
  for i=1,count do
    block(i)
  end
end
]]
## unroll(10, function(i)
  World.r(#["_" .. tostring(i)]#, usize)
## end)

local Entity = @record{
  pos: P("positions", Vec2),
  vel: P("velocities", Vec2),
}

World.r("entities", Entity)

local positions = world:s("positions")
positions:reserve(10010)
local velocities = world:s("velocities")
velocities:reserve(10010)
local entities = world:s("entities")
entities:reserve(10010)

for i=0,<10 do
  local pos = positions:create({ x = i, y = i })
  local vel = velocities:create({ x = i, y = i })
  local entity = entities:create({
    pos = pos,
    vel = vel,
  })
end

-- Initial State
print("===== Initial State =====")
for id, e in mpairs(entities) do
  print(id, e, positions[e.pos], velocities[e.vel])
end

-- Run "System"
for _, e in mpairs(entities) do
  positions[e.pos] = positions[e.pos] + velocities[e.vel]
end

-- Final State
print("===== Final State =====")
for id, e in mpairs(entities) do
  print(id, e, positions[e.pos], velocities[e.vel])
end

-- Benchmark
print("===== Benching with 10,000 Entities =====")

local now = os.now()
for i=0,<10000 do
  if i % 10 == 0 then
    entities:create({
      pos = positions:create({ x = i, y = i }),
      vel = velocities:create({ x = i, y = i }),
    })
  else
    entities:create({
      pos = positions:create({ x = i, y = i }),
    })
  end
end
print("Creation: ", (os.now() - now) * 1000000)

require "vector"
local times: vector(float64)

for i=0,<1000 do
  now = os.now()
  for id, e in mpairs(entities) do
    positions[e.pos] = positions[e.pos] + velocities[e.vel]
  end
  local time = os.now() - now

  times:push(time)
end

local avg: float64 = 0.0
for _, time in ipairs(times) do
  avg = avg + time
end
avg = avg / #times

print("Avg Iteration: ", avg * 1000000)

-- math
local a = Mat4.identity()
local b = Mat4.identity()
b.x.x = 2
b.y.x = 2
b.y.y = 2
local c = a * b
print(c)

-- renderer
require "wgpu"
wgpuSetLogCallback((@WGPULogCallback)(function(level: WGPULogLevel, msg: cstring, ptr: pointer): void
  print("WGPU" .. level .. ": " .. msg)
end))
wgpuSetLogLevel(WGPULogLevel_Info)

local GLFWContext = require 'entropy.render.glfw_context'
local Renderer = require "entropy.render.renderer"
local BasicImpl = require "entropy.render.impl.basic"
local Camera = require "entropy.scene.camera"
local Mesh = require "entropy.scene.mesh"

local context: GLFWContext
context:init("testing", 512, 512, false)

local renderer: Renderer(BasicImpl)
renderer:init(context.device, context.format, context.width, context.height)

-- setup resize callback
context.user_pointer = &renderer
context.resize_callback = function(user: pointer, width: uint32, height: uint32): void
  local crenderer = (@*Renderer(BasicImpl))(user)
  crenderer:resize(width, height)
end

-- setup camera
local cameras = world:s("entropy.scene.cameras")
local camera_idx = cameras:create({
  pos = { 0, 0, 0 },
  rot = { 0, 0, 0 },

  fov = 90,

  z_near = 0.1,
  z_far = 100,
})
cameras[camera_idx]:look_at({ 0, 0, 0 })

-- load mesh
local meshes = world:s("entropy.scene.meshes")
local mesh_idx = meshes:create(Mesh.load_from_obj("./teapot.obj"))
meshes[mesh_idx]:prepare(renderer)
meshes[mesh_idx].transform = Mat4.identity()

while not context:should_close() do
  -- get input
  context:poll_events()

  -- update
  cameras[camera_idx].pos = { math.sin(world:now()) * 5, 2, math.cos(world:now()) * 5 }
  cameras[camera_idx]:look_at({ 0, 1, 0 })

  -- render
  local view = context:view()
  renderer:render(view, &world)
  context:present()
end

renderer:cleanup()
context:cleanup()
