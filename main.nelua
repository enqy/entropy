require "iterators"
require "string"
require "os"

local World = require "entropy.world"
require "entropy.world"
local Storage = World.Storage
local P = World.Pointer
local math = require "entropy.math"
local Vec2 = math.Vec2
local Quaternion = math.Quaternion

local Position = @record{ pos: Vec2 }

local world: World

-- register components
World.r("positions", Vec2)
World.r("velocities", Vec2)

local Entity = @record{
  pos: P("positions", Vec2),
  vel: P("velocities", Vec2),
}

World.r("entities", Entity)

local positions = world:s("positions")
positions:reserve(10010)
local velocities = world:s("velocities")
velocities:reserve(10010)
local entities = world:s("entities")
entities:reserve(10010)

for i=0,<10 do
  local pos = positions:create({ x = i, y = i })
  local vel = velocities:create({ x = i, y = i })
  local entity = entities:create({
    pos = pos,
    vel = vel,
  })
end

-- Initial State
print("===== Initial State =====")
for id, e in mpairs(entities) do
  print(id, e, positions[e.pos], velocities[e.vel])
end

-- Run "System"
for _, e in mpairs(entities) do
  positions[e.pos] = positions[e.pos] + velocities[e.vel]
end

-- Final State
print("===== Final State =====")
for id, e in mpairs(entities) do
  print(id, e, positions[e.pos], velocities[e.vel])
end

-- Benchmark
print("===== Benching with 10,000 Entities =====")

local now = os.now()
for i=0,<10000 do
  if i % 10 == 0 then
    entities:create({
      pos = positions:create({ x = i, y = i }),
      vel = velocities:create({ x = i, y = i }),
    })
  else
    entities:create({
      pos = positions:create({ x = i, y = i }),
    })
  end
end
print("Creation: ", (os.now() - now) * 1000000)

now = os.now()
for id, e in mpairs(entities) do
  positions[e.pos] = positions[e.pos] + velocities[e.vel]
end
print("Iteration: ", (os.now() - now) * 1000000)
