## pragmas.nogc = true

local World = require "entropy.world"
local world: World

local Render = require 'entropy.render'
local Context = require 'entropy.render.context.wasm'
local Renderer = require "entropy.render.renderer"
local MeshImpl = require "entropy.render.impl.mesh"
require "entropy.render.impl.compose"
local Camera = require "entropy.scene.camera"
local Mesh = require "entropy.scene.mesh"
local Event = require "entropy.defs.event"

-- local function print(s: cstring): void <cimport> end

local render: Render
local context: Context
local renderer: Renderer(MeshImpl)

local function onInit() <cexport, codename 'onInit'>
  print("onInit")

  render:init_default()

  context:init(".entropy-canvas", 512, 512, true, render)

  renderer:init(context.device, context.format, context.width, context.height)

  -- setup camera
  local cameras = world:s("entropy.scene.cameras", Camera)
  local camera_idx = cameras:create({
    pos = { 10, 10, 10 },
    rot = { 0, 0, 0 },

    fov = 90,

    z_near = 0.1,
    z_far = 10000,
  })
  cameras[camera_idx]:look_at({ 0, 0, 0 })
end

local function onAnimationFrame() <cexport, codename 'onAnimationFrame'>
  local view = context:view()
  renderer:render(view, &world)
  context:present()
end
